#!/usr/bin/env perl

###
### git-follow - Follow lifetime changes of a pathspec in Git.
###
### Copyright (C) 2017 Nickolas Burr <nickolasburr@gmail.com>
###

use 5.008;
use strict;
use warnings;
use lib "/usr/local/opt/git-follow/src";
use Cwd qw(getcwd);
use File::Basename qw(basename);
use Getopt::Long qw(
	Configure
	GetOptions
);
use GitFollow::Cli::OptionsNormalizer qw(
	format
	normalize
);
use GitFollow::Config qw(
	get_config
	has_config
);
use GitFollow::Log qw(
	print_total
	set_refspec
	$DEFAULT_LOG_FMT
	$INVALID_PATH_ERR
	$INVALID_PATH_WITHIN_RANGE_ERR
	$INVALID_REPO_ERR
	$INVALID_REPO_HINT
);
use GitFollow::Environment qw($GIT_PATH);
use GitFollow::Metadata qw(
	print_usage
	print_version
);
use GitFollow::Repository::ObjectUtils qw(
	is_object
	is_repo
);

# If --version (or -V) was given as an option,
# print the current release version and exit.
print_version() if grep { $_ eq "--version" or $_ eq "-V" } @ARGV;

# If git-follow was executed without arguments,
# print usage information and exit.
print_usage() unless @ARGV;

my ($pathspec, $refspec, @refs) = undef;

# Diff modes and their git-log(1) option counterparts.
my %diffopts = (
	"inline"   => "none",
	"sxs"      => "plain",
	"colorsxs" => "color",
);

my %git_log = (
	"pager_mode" => "--paginate",
	"command"    => "log",
);

my %git_log_opts = (
	"diff"   => "--word-diff=%s",
	"m"      => "-m",
	"follow" => "--follow",
	"format" => "--format=%s",
	"graph"  => "--graph",
	"patch"  => "--patch-with-stat",
);

# follow.pager.disable configuration. Replace --paginate with --no-pager if set to true.
$git_log{"pager_mode"} = "--no-pager" if has_config("pager", "disable") and get_config("pager", "disable") eq "true";

# follow.diff.mode configuration.
if (has_config("diff", "mode")) {
	my $diffmode = get_config("diff", "mode");

	die sprintf("Invalid value '%s' specified for follow.diff.mode\n", $diffmode) unless grep { $_ eq $diffmode } keys %diffopts;

	# Set corresponding --word-diff config value.
	$git_log_opts{"diff"} = sprintf($git_log_opts{"diff"}, $diffopts{$diffmode});
}

# follow.log.format configuration.
$git_log_opts{"format"} = sprintf(
	$git_log_opts{"format"},
	(has_config("log", "format") ? get_config("log", "format") : $DEFAULT_LOG_FMT)
);

print_usage() unless @ARGV;

# Validate we're inside a Git repository.
die sprintf("%s\n%s", sprintf($INVALID_REPO_ERR, getcwd), $INVALID_REPO_HINT) unless is_repo();

$pathspec = ($ARGV[$#ARGV] eq ".")
          ? basename(getcwd) : $ARGV[$#ARGV];

# If --total (or -T) was given as an option, print
# total number of revisions for pathspec and exit.
print_total($pathspec) if grep { $_ eq "--total" or $_ eq "-T" } @ARGV;

my @apts = ();
my %dispatch = (
	# Set alias, passthrough options and option arguments.
	"set_option" => sub {
		push @apts, &format('log', $pathspec, @_);
	},
	"set_pager" => sub {
		$git_log{"pager_mode"} = "--paginate";
	},
	"set_refspec" => sub {
		set_refspec((@_, \$refspec));
	},
	"set_flag" => sub {
		my $option = shift;

		# Get formatted git-log(1) option from the unary option given.
		$git_log_opts{$option} = &format('log', $pathspec, $option);
		normalize(\%git_log_opts, $option);
	},
	"print_total" => sub {
		print_total($pathspec)
	},
	"print_usage" => \&print_usage,
	"print_version" => \&print_version,
);

Configure(
	"no_auto_abbrev",
	"no_ignore_case",
	"require_order",
);

GetOptions(
	'branch|b=s{1,1}'  => $dispatch{"set_refspec"},
	'first|f'          => $dispatch{"set_option"},
	'func|F=s{1,1}'    => $dispatch{"set_option"},
	'last|l=i{0,1}'    => $dispatch{"set_option"},
	'lines|L=s{1,1}'   => $dispatch{"set_option"},
	'no-merges|M'      => $dispatch{"set_flag"},
	'no-patch|N'       => $dispatch{"set_flag"},
	'no-renames|O'     => $dispatch{"set_flag"},
	'pager|p'          => $dispatch{"set_pager"},
	'pickaxe|P=s{1,1}' => $dispatch{"set_option"},
	'range|r=s{1,1}'   => $dispatch{"set_refspec"},
	'reverse|R'        => $dispatch{"set_flag"},
	'tag|t=s{1,1}'     => $dispatch{"set_refspec"},
	'total|T'          => $dispatch{"print_total"},
	'usage|help|h'     => $dispatch{"print_usage"},
	'version|V'        => $dispatch{"print_version"},
) or print_usage();

# Set default ref to HEAD if not given explicitly
# via option --branch, --range, or --tag.
$refspec = "HEAD" unless defined $refspec;

# Attempt split at .. range delimiter.
@refs = split /\.{2}/, $refspec;

# Verify pathspec is valid given each ref in @refs.
foreach my $ref (@refs) {
	die sprintf($INVALID_PATH_WITHIN_RANGE_ERR, $pathspec, $refspec) unless is_object($ref, $pathspec);
}

system $GIT_PATH, $git_log{"pager_mode"}, $git_log{"command"}, @apts, values %git_log_opts, $refspec, "--", $pathspec;

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

	git-follow - Follow lifetime changes of a pathspec in Git.

=head1 VERSION

	version 1.1.5

=head1 DESCRIPTION

	Follow lifetime changes of a pathspec in Git. git-follow(1) makes analyzing changes of a pathspec trivial with robust options and simplified log output.

=head1 CONFIGURATION

	Configuration values set via git-config(1) can be used to customize the behavior of git-follow.

	follow.diff.mode
		Diff mode. Choices include inline, sxs, and colorsxs. See --word-diff, --color-words, et al. of git-log(1).

	follow.log.format
		Log format. See --format of git-log(1) for syntax.

	follow.pager.disable
		Disable pager. Defaults to false. Set to true to disable pager. See --no-pager of git(1).

=head1 OPTIONS

	-b, --branch <branchref>
		Show commits specific to a branch.

	-f, --first
		Show first commit where Git initiated tracking of pathspec.

	-F, --func <funcname>
		Show commits which affected function <funcname> in pathspec. See -L of git-log(1).

	-l, --last [<count>]
		Show last <count> commits which affected pathspec. Omitting <count> defaults to last commit.

	-L, --lines <start>[,<end>]
		Show commits which affected lines <start> to <end> in pathspec. Omitting <end> defaults to EOF.

	-M, --no-merges
		Show commits which have a maximum of one parent. See --no-merges of git-log(1).

	-N, --no-patch
		Suppress diff output. See --no-patch of git-log(1).

	-O, --no-renames
		Disable rename detection. See --no-renames of git-log(1).

	-p, --pager
		Force pager when invoking git-log(1). Overrides follow.pager.disable config value.

	-P, --pickaxe <string>
		Show commits which change the number of occurrences of <string> in pathspec. See -S of git-log(1).

	-r, --range <start>[,<end>]
		Show commits in range <start> to <end>. Omitting <endref> defaults to HEAD. See git-revisions(1).

	-R, --reverse
		Show commits in reverse chronological order. See --walk-reflogs of git-log(1).

	-t, --tag <tagref>
		Show commits specific to a tag.

	-T, --total
		Show total number of commits for pathspec.

	-V, --version
		Show current release version.

=head1 NOTES

	Like standard Git builtins, git-follow supports an optional pathspec delimiter [--] to help disambiguate options, option arguments, and refs from pathspecs.

=head1 EXAMPLES

	Display commits on branch 'topic'
		git follow --branch topic -- blame.c

	Display first commit where Git initiated tracking
		git follow --first -- branch.c

	Display last 5 commits
		git follow --last 5 -- Makefile

	Display last commit where lines 5 through EOF were affected
		git follow --last --lines 5 -- apply.c

	Display last 3 commits where lines 10 through 15 were affected
		git follow --last 3 --lines 10,15 -- bisect.c

	Display commits where function `funcname' was affected
		git follow --func funcname -- archive.c

	Display commits in range from aa03428 to b354ef9
		git follow --range aa03428,b354ef9 -- worktree.c

	Display commits in range from v1.5.3 to v1.5.4
		git follow --range v1.5.3,v1.5.4 -- apply.c

	Display commits up to tag v1.5.3
		git follow --tag v1.5.3 -- graph.c

	Display total number of commits
		git follow --total -- rebase.c

=head1 BUGS

	https://github.com/nickolasburr/git-follow/issues

=head1 AUTHOR

	Written by Nickolas Burr <nickolasburr@gmail.com>

=head1 SEE ALSO

	git(1), git-branch(1), git-check-ref-format(1), git-config(1), git-diff(1), git-log(1), git-remote(1), git-revisions(1), git-tag(1)

=cut

# vim: syntax=perl
