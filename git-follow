#!/usr/bin/env perl

###
### git-follow - Follow lifetime changes of a pathspec in Git.
###
### Copyright (C) 2017 Nickolas Burr <nickolasburr@gmail.com>
###

use 5.008;
use strict;
use warnings;
use lib "/usr/local/etc/git-follow/src";
use Cwd qw(getcwd);
use File::Basename;
use Getopt::Long;
use GitFollow::Core;

# @todo: Utilize $dispatch{"show_version"} instead.
# -------------------------------------------
# If --version (or -V) was given as an option,
# print the current release version and exit.
&show_version() if grep { $_ eq "--version" or $_ eq "-V" } @ARGV;

our $LOG_FMT;
my ($pathspec, $refspec);

# Diff modes and their git-log(1) option counterparts.
my %diffopts = (
	"inline"   => "none",
	"sxs"      => "plain",
	"colorsxs" => "color",
);

my %git_log = (
	"executable" => "/usr/bin/git",
	"pager_mode" => "--paginate",
	"command"    => "log",
);

my %git_log_options = (
	"diff"   => "--word-diff=%s",
	"m"      => "-m",
	"follow" => "--follow",
	"format" => "--format=%s",
	"graph"  => "--graph",
	"patch"  => "--patch-with-stat",
);

# follow.pager.disable configuration. Replace --paginate with --no-pager if set to true.
$git_log{"pager_mode"} = "--no-pager" if &has_config("pager", "disable") and &get_config("pager", "disable") eq "true";

# follow.diff.mode configuration.
if (&has_config("diff", "mode")) {
	my $diffmode = &get_config("diff", "mode");

	die sprintf("Invalid value '%s' specified for follow.diff.mode\n", $diffmode) unless grep { $_ eq $diffmode } keys %diffopts;

	# Set corresponding --word-diff config value.
	$git_log_options{"diff"} = sprintf($git_log_options{"diff"}, $diffopts{$diffmode});
}

# follow.log.format configuration.
$git_log_options{"format"} = sprintf($git_log_options{"format"}, (&has_config("log", "format") ? &get_config("log", "format") : $LOG_FMT));

# Options and their conflicting counterparts.
my %copts = (
	"no-merges"  => [
		"m",
	],
	"no-patch"   => [
		"patch",
	],
	"no-renames" => [
		"follow",
	],
	"reverse"    => [
		"graph",
		"follow",
	],
);

# Default argument values for options that accept arguments.
my %dargs = (
	"last"  => 1,
	"lines" => 1,
);

die "$USAGE_SYNOPSIS" unless @ARGV;

# Validate we're inside a Git repository.
die sprintf("%s\n%s", sprintf($INVALID_REPO_ERR, getcwd), $INVALID_REPO_HINT) unless &is_repo();

$pathspec = ($ARGV[$#ARGV] eq ".")
          ? &File::Basename::basename(getcwd)
          : $ARGV[$#ARGV];

# @todo: Utilize $dispatch{"show_total"} instead.
# ------------------------------------------------
# If --total (or -T) was given as an option, print
# total number of revisions for pathspec and exit.
&show_total($pathspec) if grep { $_ eq "--total" or $_ eq "-T" } @ARGV;

my @apts = ();

my %dispatch = (
	# Set alias, passthrough options and option arguments.
	"set_apt_opt"   => sub {
		push @apts, &get_format_apt(($pathspec, @_));
	},
	"set_pager"     => sub {
		$git_log{"pager_mode"} = "--paginate";
	},
	"set_refspec"   => sub {
		&set_refspec((@_, \$refspec));
	},
	"set_unary_opt" => sub {
		my $option = shift;

		# Get formatted git-log(1) option from the unary option given.
		$git_log_options{$option} = &get_format_apt($pathspec, $option);

		# Remove any conflicting options from %git_log_options.
		&rm_copts($option, \%copts, \%git_log_options);
	},
	"show_total"    => sub {
		&show_total($pathspec);
	},
	"show_version"  => sub {
		&show_version();
	},
);

&Getopt::Long::Configure(
	"no_auto_abbrev",
	"no_ignore_case",
	"require_order",
);

&Getopt::Long::GetOptions(
	'branch|b=s{1,1}'   => $dispatch{"set_refspec"},
	'first|f'           => $dispatch{"set_apt_opt"},
	'func|F=s{1,1}'     => $dispatch{"set_apt_opt"},
	'last|l=i{0,1}'     => $dispatch{"set_apt_opt"},
	'lines|L=i@{1,2}'   => $dispatch{"set_apt_opt"},
	'no-merges|M'       => $dispatch{"set_unary_opt"},
	'no-patch|N'        => $dispatch{"set_unary_opt"},
	'no-renames|O'      => $dispatch{"set_unary_opt"},
	'pager|p'           => $dispatch{"set_pager"},
	'pickaxe|P=s{1,1}'  => $dispatch{"set_apt_opt"},
	'range|r=s@{1,1}'   => $dispatch{"set_apt_opt"},
	'reverse|R'         => $dispatch{"set_unary_opt"},
	'tag|t=s{1,1}'      => $dispatch{"set_refspec"},
	'total|T'           => $dispatch{"show_total"},
	'version|V'         => $dispatch{"show_version"},
) or &on_error();

# Set default refspec if not given explicitly via --branch, --range, or --tag.
$refspec = "HEAD" unless defined $refspec;

# If pathspec was not a valid file object, emit an error and kill the script.
if (!&is_pathspec($refspec, $pathspec)) {
	die sprintf($GitFollow::Core::INVALID_PATH_ERR, $pathspec);
}

# Retain order of %git_log values in an array.
my @git_log = ($git_log{"executable"}, $git_log{"pager_mode"}, $git_log{"command"});

system @git_log, @apts, values %git_log_options, $refspec, "--", $pathspec;

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

	git-follow - Follow lifetime changes of a pathspec in Git

=head1 VERSION

	version 1.1.4

=head1 DESCRIPTION

	Follow lifetime changes of a pathspec in Git. git-follow(1) makes analyzing changes of a pathspec trivial with robust options and simplified log output.

=head1 ENVIRONMENT

	Configuration values set via git-config(1) can be used to customize the behavior of git-follow. The following configurations are honored:

	follow.diff.mode
		Diff mode. Defaults to inline. See --word-diff, --color-words, et al. of git-log(1) for syntax.

	follow.log.format
		Log format. See --format of git-log(1) for syntax.

	follow.pager.disable
		Disable pager. Defaults to false. Set to true to disable pager. Has equivalent effect of 'git --no-pager follow ...'. See --no-pager of git(1).

=head1 OPTIONS

	--branch, -b <branchref>
		Show commits for pathspec, specific to a branch.

	--first, -f
		Show first commit where Git initiated tracking of pathspec.

	--func, -F <funcname>
		Show commits which affected function <funcname> in pathspec. See -L of git-log(1).

	--last, -l [<count>]
		Show last <count> commits which affected pathspec. Omitting <count> defaults to last commit.

	--lines, -L <start> [<end>]
		Show commits which affected lines <start> through <end> in pathspec. Omitting <end> defaults to EOF.

	--no-merges, -M
		Show commits which have a maximum of one parent. See --no-merges of git-log(1).

	--no-patch, -N
		Suppress diff output. See --no-patch of git-log(1).

	--no-renames, -O
		Disable rename detection. See --no-renames of git-log(1).

	--pager, -p
		Force pager when invoking git-log(1). Overrides follow.pager.disable config value.

	--pickaxe, -P <string>
		Show commits which change the number of occurrences of <string> in pathspec. See -S of git-log(1).

	--range, -r <startref> [<endref>]
		Show commits in range <startref> to <endref> which affected pathspec. Omitting <endref> defaults to HEAD. See git-revisions(1).

	--reverse, -R
		Show commits in reverse chronological order. See --walk-reflogs of git-log(1).

	--tag, -t <tagref>
		Show commits for pathspec, specific to a tag.

	--total, -T
		Show total number of commits for pathspec.

	--version, -V
		Show current release version.

=head1 NOTES

	Like standard Git builtins, git-follow supports an optional pathspec delimiter [--] to help disambiguate options, option arguments, and refs from pathspecs.

=head1 EXAMPLES

	Display commits on branch 'topic'
		git follow --branch topic -- blame.c

	Display first commit where Git initiated tracking
		git follow --first -- branch.c

	Display last 5 commits
		git follow --last 5 -- Makefile

	Display last commit where lines 5 through `EOF' were affected
		git follow --last --lines 5 -- apply.c

	Display last 3 commits where lines 10 through 15 were affected
		git follow --last 3 --lines 10 15 -- bisect.c

	Display commits where function `funcname' was affected
		git follow --func funcname -- archive.c

	Display commits in range fifth ancestor of master to HEAD
		git follow --range master@{5} -- worktree.c

		--OR--

		Same as above (assuming currently checked out branch is master).

		git follow --range 5 -- worktree.c

	Display commits between two days ago and one hour ago
		git follow --range 'master@{2 days ago}' 'master@{1 hour ago}' -- apply.c

	Display commits up to tag v1.5.3
		git follow --tag v1.5.3 -- graph.c

	Display total number of commits
		git follow --total -- rebase.c

=head1 BUGS

	https://github.com/nickolasburr/git-follow/issues

=head1 AUTHOR

	Written by Nickolas Burr <nickolasburr@gmail.com>

=head1 SEE ALSO

	git(1), git-branch(1), git-check-ref-format(1), git-config(1), git-diff(1), git-log(1), git-remote(1), git-revisions(1), git-tag(1)

=cut

# vim: syntax=perl
