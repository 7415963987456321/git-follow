#!/usr/bin/env perl

# Copyright (C) 2017 Nickolas Burr <nickolasburr@gmail.com>
# License under WTFPL (http://www.wtfpl.net/txt/copying/)

# git-follow: Follow lifetime changes (including renames)
# of a file through the complete history of a Git repository
use 5.008;
use Getopt::Long;
use strict;
use warnings;

# specific user error type messages
my $repo_not_found_error   = "Not a Git repository, exiting the script";
my $invalid_pathspec_error = "Not a valid pathspec, exiting the script";
my $invalid_usage_error    = "Usage: git follow [[--first|-f] | [--func|-F] | [--last|-l] | [--lines|-L] | [--reverse|-r]] filename";

# store length of `@ARGV`
my $argc = @ARGV;

# if `system` returns a non-zero exit status, meaning the
# current directory is not a Git repository, kill the script
!system("git rev-parse --is-inside-work-tree >/dev/null 2>&1") or die "$repo_not_found_error";

# if no arguments were given, emit an error and kill the script
$argc or die "$invalid_usage_error";

# store the last argument (which should be
# the filename the user is trying to track)
# and remove it from `@ARGV` array
my $filename = pop @ARGV;

# logical separator used to help differentiate
# between ambiguous flag options (and arguments),
# branch/revision/tag refs, and valid pathspecs
my $lsep = "--";

# verify `$filename` is a valid pathspec
if (! -e $filename) {
	die "$invalid_pathspec_error";
}

# flag options passed to the script
my %flags;

# optionally set default view for diffs
# shown in `git log` (defaults to inline)
my $git_log_diff = "--color-words";

# default format to use for `git log --format` flag option
my $git_log_format = "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Commit:  %C(bold magenta)%h%Creset
* Tree:    %C(bold cyan)%t%Creset
* Message: %s
* Author:  %C(bold blue)%an%Creset %C(bold yellow)<%ae>%Creset
* When:    %C(bold green)%cr
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
";

# default `git log` flag options
my @git_log_flags = (
	"--follow",
	"--format=$git_log_format",
	"--graph",
	"--no-merges",
	"--patch-with-stat"
);

# default argument values for flag options
my %dargs = (
	"first" => "A",
	"last"  => 1,
	"lines" => 1
);

# base components of `git log` shell command, represented
# as an array to make it easier to pass to `system` builtin
my @git_log = (
	"git",
	"log"
);

# get the first n commits for the given pathspec
sub get_first_n_commits {
	# @todo: If the `--first` flag is given with an argument,
	# get the first n commits for the given pathspec
}

# format the `git log` flag with argument(s) given
sub get_format_rflag {
	my $flag = shift;
	my @args = shift;
	if ($flag eq "first") {
		my $num = shift @args;
		if (!$num) {
			return "--diff-filter=A";
		} else {
			# @todo: This is a placeholder until I finalize
			# building `&get_first_n_commits` subroutine
			return "--diff-filter=C";
		}
	} elsif ($flag eq "func") {
		my $funcname = shift @args;
		return "-L\^\:$funcname\:$filename";
	} elsif ($flag eq "last") {
		my $num = shift @args;
		if (!$num) {
			return "--max-count=1";
		} else {
			return "--max-count=$num";
		}
	} elsif ($flag eq "lines") {
		my @nums  = shift @args;
		my $lines = shift @nums;
		my $start = @$lines[0];
		my $end   = @$lines[1];
		if (!$end) {
			return "-L $start:$filename"
		} else {
			return "-L $start,$end:$filename";
		}
	}
}

# map to `git log` flag options, format the
# command and pass it to `system` builtin
sub git_follow {
	my @command = ();
	# iterate through flag options and arguments (if applicable)
	while (my ($flag, $args) = each %flags) {
		my $rflag = &get_format_rflag($flag, $args);
		push @command, $rflag;
	}
	# change the diff style, if applicable
	unshift @git_log_flags, $git_log_diff if defined $git_log_diff;
	unshift @command, @git_log, @git_log_flags;
	# add pathspec separator and filename
	push @command, $lsep, $filename;
	system @command;
}

# set argument value(s) for `$flag`,
# whether given to the flag or default
sub set_args {
	my $flag = shift;
	my $arg  = shift;
	if (!$arg) {
		$flags{$flag} = $dargs{$flag};
	} else {
		$flags{$flag} = $arg;
	}
}

# require flag options to be case-sensitive, positionally interchangeable,
# and able to accept a range of arguments, based on the flag
Getopt::Long::Configure(
	'no_ignore_case',
	'no_auto_abbrev',
	'no_getopt_compat',
	'require_order'
);

# get flag options and arguments passed to the script
GetOptions(
	\%flags,
	'first|f=i{0,1}',
	'func|F=s{1,1}',
	'last|l=i{0,1}' => \&set_args,
	'lines|L=i@{1,2}',
	'reverse|r'
) or die "$invalid_usage_error";

# execute `git follow` command with flag options
&git_follow();
