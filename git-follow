#!/usr/bin/env perl

###
### git-follow - Follow lifetime changes of a pathspec in Git.
###
### Copyright (C) 2017 Nickolas Burr <nickolasburr@gmail.com>
###

use 5.008;
use strict;
use warnings;
use Cwd qw(getcwd);
use Getopt::Long;
require "src/common.pl";
require "src/subs.pl";

our $GIT_FOLLOW_DIFF_MODE;
our $GIT_FOLLOW_LOG_FORMAT;
our $GIT_FOLLOW_NO_PAGER;

our $INVALID_PATH_ERR;
our $INVALID_REPO_ERR;
our $INVALID_REPO_HINT;
our $USAGE_SYNOPSIS;

# If --version (or -V) was given as an option,
# print the current release version and exit.
if (grep { $_ eq "--version" || $_ eq "-V" } @ARGV) {
	&show_version();
}

# If --total (or -T) was given as an option, print
# total number of revisions for pathspec and exit.
if (grep { $_ eq "--total" || $_ eq "-T" } @ARGV) {
	&show_total();
}

# If no arguments were given (e.g. `git follow`, no pathspec),
# emit an error message with usage details and kill the script.
# We'll place this before the repository check, in case a user
# is running `git follow` purely for the usage information.
@ARGV or die "$USAGE_SYNOPSIS";

# If `system` returns non-zero exit status, kill the script.
if (system("git rev-parse --is-inside-work-tree &>/dev/null")) {
	# @todo: Build option to silence FYI output.
	my $INVALID_REPO = sprintf("%s\n%s", sprintf($INVALID_REPO_ERR, getcwd), $INVALID_REPO_HINT);

	die "$INVALID_REPO";
}

our %git_log_options;
our @git_log_option_values;
our %options;
our $pathspec;
our $refspec;

# Name of pathspec given as an argument to git-follow.
$pathspec = $ARGV[$#ARGV];
$refspec = undef;

# Logical separator used to help differentiate
# between ambiguous options, option arguments,
# branch/revision/tag refs, and valid pathspecs.
my $lsep = "--";

# Default `git log` options.
%git_log_options = (
	"m"          => "-m",
	"follow"     => "--follow",
	"format"     => "--format=$GIT_FOLLOW_LOG_FORMAT",
	"graph"      => "--graph",
	"patch"      => "--patch-with-stat",
);

# Base components of `git log` shell command, represented
# as an array to make it easier to pass to `system` builtin.
my @git_log = (
	"git",
	"log",
);

Getopt::Long::Configure(
	"no_auto_abbrev",
	"no_ignore_case",
	"require_order",
);

Getopt::Long::GetOptions(
	\%options,
	'branch|b=s{1,1}'  => \&set_refspec,
	'first|f',
	'func|F=s{1,1}',
	'last|l=i{0,1}'    => \&set_args,
	'lines|L=i@{1,2}',
	'no-merges|M'      => \&set_unary_opt,
	'no-patch|N'       => \&set_unary_opt,
	'no-renames|O'     => \&set_unary_opt,
	'pickaxe|P=s{1,1}',
	'range|r=s@{1,2}',
	'reverse|R'        => \&set_unary_opt,
	'tag|t=s{1,1}'     => sub { &set_refspec($refspec) },
	'total|T',
	'version|V',
) or die "$USAGE_SYNOPSIS";

# Map to `git log` options, format the
# command and pass to `system` builtin.
my @command = ();

# Iterate through options and option arguments (if applicable).
while (my ($opt, $args) = each %options) {
	my $ropt = &get_format_ropt($opt, $args);
	push @command, $ropt;
}

# If GIT_FOLLOW_NO_PAGER is defined,
# pass --no-pager option to git.
if (defined $GIT_FOLLOW_NO_PAGER) {
	my $git = shift @git_log;
	unshift @git_log, ($git, "--no-pager");
}

# Update @git_log_option_values with
# corresponding git-log options.
@git_log_option_values = values %git_log_options;

# Change the diff style, if applicable.
unshift @git_log_option_values, $GIT_FOLLOW_DIFF_MODE if defined $GIT_FOLLOW_DIFF_MODE;
unshift @command, @git_log, @git_log_option_values;

# Set default refspec if not given explicitly via --branch, --tag.
$refspec = "HEAD" if not defined $refspec;

# If pathspec was not a valid file object,
# emit an error and kill the script.
if (!&is_pathspec($refspec, $pathspec)) {
	my $INVALID_PATHSPEC = sprintf($INVALID_PATH_ERR, $pathspec);
	die "$INVALID_PATHSPEC";
}

push @command, $refspec, $lsep, $pathspec;
system @command;

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

	git-follow - Follow lifetime changes of a pathspec in Git

=head1 VERSION

	version 1.1.4

=head1 DESCRIPTION

	Follow lifetime changes of a pathspec in Git. git-follow(1) makes analyzing changes of a pathspec trivial with robust options and simplified log output.

=head1 ENVIRONMENT

	GIT_FOLLOW_DIFF_MODE
		Diff mode. Defaults to inline. See --word-diff, --color-words, et al. of git-log(1) for syntax.

	GIT_FOLLOW_LOG_FORMAT
		Log format. See --format of git-log(1) for syntax.

	GIT_FOLLOW_NO_PAGER
		Disable pager. Defaults to 0. Set to 1 to disable pager. Has equivalent effect of 'git --no-pager follow ...'. See --no-pager of git(1).

=head1 OPTIONS

	--branch, -b <branchref>
		Show commits for pathspec, specific to a branch.

	--first, -f
		Show first commit where Git initiated tracking of pathspec.

	--func, -F <funcname>
		Show commits which affected function <funcname> in pathspec. See -L of git-log(1).

	--last, -l [<count>]
		Show last <count> commits which affected pathspec. Omitting <count> defaults to last commit.

	--lines, -L <start> [<end>]
		Show commits which affected lines <start> through <end> in pathspec. Omitting <end> defaults to EOF.

	--no-merges, -M
		Show commits which have a maximum of one parent. See --no-merges of git-log(1).

	--no-patch, -N
		Suppress diff output. See --no-patch of git-log(1).

	--no-renames, -O
		Disable rename detection. See --no-renames of git-log(1).

	--pickaxe, -P <string>
		Show commits which change the number of occurrences of <string> in pathspec. See -S of git-log(1).

	--range, -r <startref> [<endref>]
		Show commits in range <startref> to <endref> which affected pathspec. Omitting <endref> defaults to HEAD. See git-revisions(1).

	--reverse, -R
		Show commits in reverse chronological order. See --walk-reflogs of git-log(1).

	--tag, -t <tagref>
		Show commits for pathspec, specific to a tag.

	--total, -T
		Show total number of commits for pathspec.

	--version, -V
		Show current release version.

=head1 NOTES

	Like standard Git builtins, git-follow supports an optional pathspec delimiter [--] to help disambiguate options, option arguments, and refs from pathspecs.

=head1 EXAMPLES

	Display commits on branch 'topic'
		git follow --branch topic -- blame.c

	Display first commit where Git initiated tracking
		git follow --first -- branch.c

	Display last 5 commits
		git follow --last 5 -- Makefile

	Display last commit where lines 5 through `EOF' were affected
		git follow --last --lines 5 -- apply.c

	Display last 3 commits where lines 10 through 15 were affected
		git follow --last 3 --lines 10 15 -- bisect.c

	Display commits where function `funcname' was affected
		git follow --func funcname -- archive.c

	Display commits in range fifth ancestor of master to HEAD
		git follow --range master@{5} -- worktree.c

		--OR--

		Same as above (assuming currently checked out branch is master).

		git follow --range 5 -- worktree.c

	Display commits between two days ago and one hour ago
		git follow --range 'master@{2 days ago}' 'master@{1 hour ago}' -- apply.c

	Display commits up to tag v1.5.3
		git follow --tag v1.5.3 -- graph.c

	Display total number of commits
		git follow --total -- rebase.c

=head1 BUGS

	https://github.com/nickolasburr/git-follow/issues

=head1 AUTHOR

	Written by Nickolas Burr <nickolasburr@gmail.com>

=head1 SEE ALSO

	git(1), git-branch(1), git-check-ref-format(1), git-config(1), git-diff(1), git-log(1), git-remote(1), git-revisions(1), git-tag(1)

=cut

# vim: syntax=perl
