#!/usr/bin/env perl

# Copyright (C) 2017 Nickolas Burr <nickolasburr@gmail.com>
# License under WTFPL (http://www.wtfpl.net/txt/copying/)

# git-track: Track lifetime changes (including renames) of a file
# throughout the complete history of a Git repository
use 5.008;
use Getopt::Long;
use strict;
use warnings;

my $repo_not_found_error = "Not a repository, exiting the script";

# if `system` returns a non-zero exit status, meaning the
# current directory is not a Git repository, kill the script
!system("git rev-parse --is-inside-work-tree >/dev/null 2>&1") || die "$repo_not_found_error";

my $usage = "Usage: git track [[--first|-f] | [--func|-F] | [--last|-l] | [--lines|-L] | [--reverse|-r]] filename";

# flag options passed to the script
my %flags;

# require our flag options to be case-sensitive and positionally interchangeable
Getopt::Long::Configure('no_ignore_case', 'no_auto_abbrev', 'no_getopt_compat', 'permute');
GetOptions(\%flags, 'first|f', 'func|F', 'last|l', 'lines|L', 'reverse|r') || die "$usage";

# store length of `@ARGV`
my $argc = @ARGV;

# if no arguments were given, kill the script
if (!$argc) {
		die "$usage";
}

# store the last argument (which should be
# the filename the user is trying to track)
# and remove it from `@ARGV` array
my $filename = pop @ARGV;

# base components of `git log` shell command, represented
# as an array to make it easier to pass to `system` builtin
my @git_log = (
	"git",
	"log"
);

# default format to use for `git log --format` flag option
my $git_log_default_format = "%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n";

# optionally set default view for diffs
# shown in `git log` (defaults to inline)
my $git_log_default_diff = "--side-by-side";

# default `git log` flag options
my @git_log_flags = (
	"--follow",
	"--format='$git_log_default_format'",
	"--graph",
	"--no-merges",
	"--patch-with-stat"
);
